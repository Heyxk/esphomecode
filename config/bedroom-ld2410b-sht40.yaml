esphome:
  name: bedroom-ld2410b-sht40
  friendly_name: bedroom_ld2410b_sht40
  platformio_options: 
    board_build.flash_mode: dio
  # for ld2410
  includes:
    - ld2410_uart.h
  # on_boot:
  #   priority: 600
  #   then:
  #     - lambda: |-
  #         auto uart_component = static_cast<LD2410 *>(ld2410);
  #         uart_component->setNumbers(maxMovingDistanceRange, maxStillDistanceRange, noneDuration);

esp32:
  board: airm2m_core_esp32c3
  framework:
    type: arduino

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:

ota:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Bedroom-Ld2410B-Sht40"
    password: "XuA6YHVU5MxQ"

captive_portal:

# for sht40
i2c:
  sda: 4
  scl: 5
  scan: true
  id: bus_a


# for ld2410b
uart:
  id: uart_1
  rx_pin: 1
  tx_pin: 0
  baud_rate: 115200 # Change this according to your setting
  parity: NONE
  stop_bits: 1
  debug:
    direction: BOTH
    dummy_receiver: false
    after:
      delimiter: [0xF8,0xF7,0xF6,0xF5] # 检测到此数据后uart进入debug模式
      
custom_component:
  - lambda: |-
      return {new LD2410(id(uart_1))};
    components:
      - id: ld2410
      
binary_sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      return {uart_component->hasTarget,uart_component->hasMovingTarget,uart_component->hasStillTarget,uart_component->lastCommandSuccess};
    binary_sensors:
      - name: "Has Target"
      - name: "Has Moving Target"
      - name: "Has Still Target"
      - name: "Last Command Success"
  
sensor:
  - platform: custom
    lambda: |-
      auto uart_component = static_cast<LD2410 *>(ld2410);
      return {uart_component->movingTargetDistance,uart_component->movingTargetEnergy,uart_component->stillTargetDistance,uart_component->stillTargetEnergy,uart_component->detectDistance};
    sensors:
      - name: "Moving Target Distance"
        unit_of_measurement: "cm"
        accuracy_decimals: 0
      - name: "Moving Target Energy"
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: "Still Target Distance"
        unit_of_measurement: "cm"
        accuracy_decimals: 0
      - name: "Still Target Energy"
        unit_of_measurement: "%"
        accuracy_decimals: 0
      - name: "Detect Distance"
        unit_of_measurement: "cm"
        accuracy_decimals: 0
  # sht40
  - platform: sht4x
    temperature:
      name: "temperature"
    humidity:
      name: "humidity"
    update_interval: 60s
    i2c_id: bus_a
    address: 0x44

# number:
#   - platform: template
#     name: "Max Moving Distance Range"
#     id: maxMovingDistanceRange
#     min_value: 1
#     max_value: 8
#     step: 1
#     update_interval: never
#     optimistic: true
#     set_action:
#       - lambda: |-
#           auto uart_component = static_cast<LD2410 *>(ld2410);
#           uart_component->setMaxDistancesAndNoneDuration(x,id(maxStillDistanceRange).state,id(noneDuration).state);
#   - platform: template
#     name: "Max Still Distance Range"
#     id: maxStillDistanceRange
#     min_value: 1
#     max_value: 8
#     step: 1
#     update_interval: never
#     optimistic: true
#     set_action:
#       - lambda: |-
#           auto uart_component = static_cast<LD2410 *>(ld2410);
#           uart_component->setMaxDistancesAndNoneDuration(id(maxMovingDistanceRange).state,x,id(noneDuration).state);
#   - platform: template
#     name: "None Duration"
#     id: noneDuration
#     min_value: 0
#     max_value: 32767
#     step: 1
#     mode: box
#     update_interval: never
#     optimistic: true
#     set_action:
#       - lambda: |-
#           auto uart_component = static_cast<LD2410 *>(ld2410);
#           uart_component->setMaxDistancesAndNoneDuration(id(maxMovingDistanceRange).state,id(maxStillDistanceRange).state,x);
      

button:
  - platform: template
    name: "Reboot LD2410"
    on_press:
      lambda: 'static_cast<LD2410 *>(ld2410)->reboot();'
  # - platform: template
  #   name: "Turn on config mode"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(true);'
  # - platform: template
  #   name: "Turn off config mode"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setConfigMode(false);'
  # - platform: template
  #   name: "Get config"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->queryParameters();'
  # - platform: template
  #   name: "Set baud rate to 256000"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setBaudrate(7);'
  # - platform: template
  #   name: "Set baud rate to 115200"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setBaudrate(5);'
  # - platform: template
  #   name: "Set baud rate to 9600"
  #   on_press:
  #     - lambda: 'static_cast<LD2410 *>(ld2410)->setBaudrate(1);'

